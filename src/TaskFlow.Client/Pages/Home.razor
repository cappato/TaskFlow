@page "/"

<PageTitle>Home - TaskFlow</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1>Welcome to TaskFlow</h1>
            <p class="lead">Manage your tasks and projects efficiently</p>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Dashboard Statistics -->
        <DashboardStats Tasks="recentTasks" />

        <div class="row mt-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Recent Tasks</h5>
                        @if (recentTasks != null && recentTasks.Any())
                        {
                            <div class="row">
                                @foreach (var task in recentTasks.Take(4))
                                {
                                    <div class="col-md-6 mb-3">
                                        <TaskCard Task="task" ShowActions="false" />
                                    </div>
                                }
                            </div>
                            <div class="mt-3">
                                <a href="/tasks" class="btn btn-primary">View All Tasks</a>
                            </div>
                        }
                        else
                        {
                            <p class="text-muted">No tasks found. <a href="/tasks">Create your first task</a></p>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Active Projects</h5>
                        @if (activeProjects != null && activeProjects.Any())
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var project in activeProjects.Take(5))
                                {
                                    <div class="list-group-item">
                                        <div class="d-flex w-100 justify-content-between">
                                            <h6 class="mb-1">@project.Name</h6>
                                            <small>@project.TaskCount tasks</small>
                                        </div>
                                        <p class="mb-1">@project.Description</p>
                                        <div class="progress mt-2" style="height: 5px;">
                                            <div class="progress-bar" role="progressbar"
                                                 style="width: @(project.TaskCount > 0 ? (project.CompletedTaskCount * 100 / project.TaskCount) : 0)%"></div>
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="mt-3">
                                <a href="/projects" class="btn btn-primary">View All Projects</a>
                            </div>
                        }
                        else
                        {
                            <p class="text-muted">No projects found. <a href="/projects">Create your first project</a></p>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private IEnumerable<TaskDto>? recentTasks;
    private IEnumerable<ProjectDto>? activeProjects;
    private bool isLoading = true;

    [Inject] public ITaskApiService TaskService { get; set; } = default!;
    [Inject] public IProjectApiService ProjectService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        isLoading = true;
        try
        {
            recentTasks = await TaskService.GetAllTasksAsync();
            activeProjects = await ProjectService.GetActiveProjectsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
