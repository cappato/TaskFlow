@page "/tasks"
@layout ModernLayout
@using TaskFlow.Client.Components.UI
@using TaskFlow.Client.Components.Layout

<PageTitle>Tareas - TaskFlow</PageTitle>

<!-- Header Section -->
<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8">
    <div>
        <h1 class="text-3xl font-bold text-gray-900">Tareas</h1>
        <p class="mt-2 text-sm text-gray-700">Gestiona y organiza todas tus tareas</p>
    </div>
    <div class="mt-4 sm:mt-0">
        <Button Variant="ButtonVariant.Primary" OnClick="ShowCreateModal">
            <Icon>
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
            </Icon>
            <ChildContent>Nueva Tarea</ChildContent>
        </Button>
    </div>
</div>

<!-- Filters Section -->
<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Filtros</h3>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <!-- Status Filter -->
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Estado</label>
            <select class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" @onchange="FilterByStatus">
                <option value="">Todos los Estados</option>
                @foreach (var status in Enum.GetValues<TaskState>())
                {
                    <option value="@status">@GetStatusDisplayName(status)</option>
                }
            </select>
        </div>

        <!-- Project Filter -->
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Proyecto</label>
            <select class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" @onchange="FilterByProject">
                <option value="">Todos los Proyectos</option>
                @if (projects != null)
                {
                    @foreach (var project in projects)
                    {
                        <option value="@project.Id">@project.Name</option>
                    }
                }
            </select>
        </div>

        <!-- Search -->
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Buscar</label>
            <div class="relative">
                <input type="text"
                       class="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                       placeholder="Buscar tareas..."
                       @oninput="SearchTasks">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Tasks Content -->
@if (isLoading)
{
    <div class="flex justify-center items-center py-12">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        <span class="ml-3 text-gray-600">Cargando tareas...</span>
    </div>
}
else if (filteredTasks != null && filteredTasks.Any())
{
    <!-- View Toggle -->
    <div class="flex justify-between items-center mb-6">
        <div class="flex items-center space-x-4">
            <span class="text-sm text-gray-700">@filteredTasks.Count() tarea@(filteredTasks.Count() != 1 ? "s" : "")</span>
        </div>
        <div class="flex items-center space-x-2">
            <button @onclick="() => viewMode = ViewMode.Grid"
                    class="@(viewMode == ViewMode.Grid ? "bg-blue-100 text-blue-700" : "text-gray-500 hover:text-gray-700") p-2 rounded-md transition-colors">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path>
                </svg>
            </button>
            <button @onclick="() => viewMode = ViewMode.List"
                    class="@(viewMode == ViewMode.List ? "bg-blue-100 text-blue-700" : "text-gray-500 hover:text-gray-700") p-2 rounded-md transition-colors">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                </svg>
            </button>
        </div>
    </div>

    @if (viewMode == ViewMode.Grid)
    {
        <!-- Grid View -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var task in filteredTasks)
            {
                <ModernTaskCard Task="task" ShowActions="true" />
            }
        </div>
    }
    else
    {
        <!-- List View -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
            <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
                <div class="grid grid-cols-12 gap-4 text-xs font-medium text-gray-500 uppercase tracking-wider">
                    <div class="col-span-4">Tarea</div>
                    <div class="col-span-2">Estado</div>
                    <div class="col-span-2">Prioridad</div>
                    <div class="col-span-2">Proyecto</div>
                    <div class="col-span-1">Fecha</div>
                    <div class="col-span-1">Acciones</div>
                </div>
            </div>
            <div class="divide-y divide-gray-200">
                @foreach (var task in filteredTasks)
                {
                    <div class="px-6 py-4 hover:bg-gray-50 transition-colors">
                        <div class="grid grid-cols-12 gap-4 items-center">
                            <!-- Task Info -->
                            <div class="col-span-4">
                                <h4 class="text-sm font-medium text-gray-900">@task.Title</h4>
                                @if (!string.IsNullOrEmpty(task.Description))
                                {
                                    <p class="text-sm text-gray-500 mt-1 truncate">@task.Description</p>
                                }
                            </div>

                            <!-- Status -->
                            <div class="col-span-2">
                                <span class="@GetStatusBadgeClasses(task.Status)">
                                    @GetStatusDisplayName(task.Status)
                                </span>
                            </div>

                            <!-- Priority -->
                            <div class="col-span-2">
                                <span class="@GetPriorityBadgeClasses(task.Priority)">
                                    @GetPriorityDisplayName(task.Priority)
                                </span>
                            </div>

                            <!-- Project -->
                            <div class="col-span-2">
                                <span class="text-sm text-gray-600">@task.ProjectName</span>
                            </div>

                            <!-- Due Date -->
                            <div class="col-span-1">
                                @if (task.DueDate.HasValue)
                                {
                                    <span class="text-xs text-gray-500">@task.DueDate.Value.ToString("dd/MM")</span>
                                }
                            </div>

                            <!-- Actions -->
                            <div class="col-span-1">
                                <div class="flex space-x-2">
                                    <button @onclick="() => EditTask(task)"
                                            class="text-gray-400 hover:text-blue-600 transition-colors">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                        </svg>
                                    </button>
                                    <button @onclick="() => DeleteTask(task.Id)"
                                            class="text-gray-400 hover:text-red-600 transition-colors">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
}
else
{
    <!-- Empty State -->
    <div class="text-center py-12">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
        </svg>
        <h3 class="mt-2 text-sm font-medium text-gray-900">No hay tareas</h3>
        <p class="mt-1 text-sm text-gray-500">Comienza creando tu primera tarea.</p>
        <div class="mt-6">
            <Button OnClick="ShowCreateModal">
                <Icon>
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                </Icon>
                <ChildContent>Crear Primera Tarea</ChildContent>
            </Button>
        </div>
    </div>
}

<!-- Modern Task Modal -->
@if (showModal)
{
    <div class="fixed inset-0 z-50 overflow-y-auto">
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <!-- Background overlay -->
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" @onclick="HideModal"></div>

            <!-- Modal panel -->
            <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
                <div class="sm:flex sm:items-start">
                    <div class="w-full">
                        <!-- Header -->
                        <div class="flex items-center justify-between mb-6">
                            <h3 class="text-lg font-medium text-gray-900">
                                @(editingTask != null ? "Editar Tarea" : "Crear Nueva Tarea")
                            </h3>
                            <button @onclick="HideModal" class="text-gray-400 hover:text-gray-600 transition-colors">
                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                            </button>
                        </div>

                        <!-- Form -->
                        <EditForm Model="taskForm" OnValidSubmit="SaveTask">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="mb-4 p-3 bg-red-50 border border-red-200 rounded-md text-red-700 text-sm" />

                            <!-- Title -->
                            <div class="mb-4">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Título</label>
                                <InputText class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" @bind-Value="taskForm.Title" />
                            </div>

                            <!-- Description -->
                            <div class="mb-4">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Descripción</label>
                                <InputTextArea class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" @bind-Value="taskForm.Description" rows="3" />
                            </div>

                            <!-- Priority and Project -->
                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Prioridad</label>
                                    <InputSelect class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" @bind-Value="taskForm.Priority">
                                        @foreach (var priority in Enum.GetValues<Priority>())
                                        {
                                            <option value="@priority">@GetPriorityDisplayName(priority)</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Proyecto</label>
                                    <InputSelect class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" @bind-Value="taskForm.ProjectId">
                                        <option value="">Seleccionar Proyecto</option>
                                        @if (projects != null)
                                        {
                                            @foreach (var project in projects)
                                            {
                                                <option value="@project.Id">@project.Name</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                            </div>

                            <!-- Due Date and Status -->
                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Fecha Límite</label>
                                    <InputDate class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" @bind-Value="taskForm.DueDate" />
                                </div>
                                @if (editingTask != null)
                                {
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-2">Estado</label>
                                        <InputSelect class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" @bind-Value="taskForm.Status">
                                            @foreach (var status in Enum.GetValues<TaskState>())
                                            {
                                                <option value="@status">@GetStatusDisplayName(status)</option>
                                            }
                                        </InputSelect>
                                    </div>
                                }
                            </div>

                            <!-- Actions -->
                            <div class="flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-3 space-y-3 space-y-reverse sm:space-y-0">
                                <Button Variant="ButtonVariant.Secondary" OnClick="HideModal" Type="button">
                                    <ChildContent>Cancelar</ChildContent>
                                </Button>
                                <Button Variant="ButtonVariant.Primary" Type="submit" Loading="@isSaving">
                                    <ChildContent>@(editingTask != null ? "Actualizar" : "Crear")</ChildContent>
                                </Button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<TaskDto>? tasks;
    private IEnumerable<TaskDto>? filteredTasks;
    private IEnumerable<ProjectDto>? projects;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool showModal = false;
    private TaskDto? editingTask;
    private TaskFormModel taskForm = new();
    private ViewMode viewMode = ViewMode.Grid;
    private string searchTerm = string.Empty;

    [Inject] public ITaskApiService TaskService { get; set; } = default!;
    [Inject] public IProjectApiService ProjectService { get; set; } = default!;

    public enum ViewMode
    {
        Grid,
        List
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            tasks = await TaskService.GetAllTasksAsync();
            filteredTasks = tasks;
            projects = await ProjectService.GetActiveProjectsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tasks: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task FilterByStatus(ChangeEventArgs e)
    {
        var statusValue = e.Value?.ToString();
        if (string.IsNullOrEmpty(statusValue))
        {
            filteredTasks = tasks;
        }
        else if (Enum.TryParse<TaskState>(statusValue, out var status))
        {
            filteredTasks = await TaskService.GetTasksByStatusAsync(status);
        }
    }

    private async Task FilterByProject(ChangeEventArgs e)
    {
        var projectIdValue = e.Value?.ToString();
        if (string.IsNullOrEmpty(projectIdValue))
        {
            filteredTasks = tasks;
        }
        else if (int.TryParse(projectIdValue, out var projectId))
        {
            filteredTasks = await TaskService.GetTasksByProjectIdAsync(projectId);
        }
        ApplySearch();
    }

    private void SearchTasks(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        ApplySearch();
    }

    private void ApplySearch()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            return; // filteredTasks already set by filters
        }

        filteredTasks = filteredTasks?.Where(t =>
            t.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            (!string.IsNullOrEmpty(t.Description) && t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(t.ProjectName) && t.ProjectName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        );
    }

    private void ShowCreateModal()
    {
        editingTask = null;
        taskForm = new TaskFormModel();
        showModal = true;
    }

    private void EditTask(TaskDto task)
    {
        editingTask = task;
        taskForm = new TaskFormModel
        {
            Title = task.Title,
            Description = task.Description,
            Priority = task.Priority,
            ProjectId = task.ProjectId,
            DueDate = task.DueDate,
            Status = task.Status
        };
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
        editingTask = null;
        taskForm = new TaskFormModel();
    }

    private async Task SaveTask()
    {
        isSaving = true;
        try
        {
            if (editingTask != null)
            {
                var updateDto = new UpdateTaskDto
                {
                    Title = taskForm.Title,
                    Description = taskForm.Description,
                    Priority = taskForm.Priority,
                    ProjectId = taskForm.ProjectId,
                    DueDate = taskForm.DueDate,
                    Status = taskForm.Status
                };
                await TaskService.UpdateTaskAsync(editingTask.Id, updateDto);
            }
            else
            {
                var createDto = new CreateTaskDto
                {
                    Title = taskForm.Title,
                    Description = taskForm.Description,
                    Priority = taskForm.Priority,
                    ProjectId = taskForm.ProjectId,
                    DueDate = taskForm.DueDate
                };
                await TaskService.CreateTaskAsync(createDto);
            }

            HideModal();
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving task: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteTask(int taskId)
    {
        if (await TaskService.DeleteTaskAsync(taskId))
        {
            await LoadData();
        }
    }

    private string GetStatusColor(TaskState status)
    {
        return status switch
        {
            TaskState.Pending => "secondary",
            TaskState.InProgress => "primary",
            TaskState.Completed => "success",
            TaskState.Cancelled => "danger",
            TaskState.OnHold => "warning",
            _ => "secondary"
        };
    }

    private string GetPriorityColor(Priority priority)
    {
        return priority switch
        {
            Priority.Low => "secondary",
            Priority.Medium => "warning",
            Priority.High => "danger",
            Priority.Critical => "dark",
            _ => "secondary"
        };
    }

    private string GetStatusDisplayName(TaskState status)
    {
        return status switch
        {
            TaskState.Pending => "Pendiente",
            TaskState.InProgress => "En Progreso",
            TaskState.Completed => "Completada",
            TaskState.Cancelled => "Cancelada",
            TaskState.OnHold => "En Espera",
            _ => status.ToString()
        };
    }

    private string GetPriorityDisplayName(Priority priority)
    {
        return priority switch
        {
            Priority.Low => "Baja",
            Priority.Medium => "Media",
            Priority.High => "Alta",
            Priority.Critical => "Crítica",
            _ => priority.ToString()
        };
    }

    private string GetStatusBadgeClasses(TaskState status)
    {
        var baseClasses = "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium";
        return status switch
        {
            TaskState.Pending => $"{baseClasses} bg-yellow-100 text-yellow-800",
            TaskState.InProgress => $"{baseClasses} bg-blue-100 text-blue-800",
            TaskState.Completed => $"{baseClasses} bg-green-100 text-green-800",
            TaskState.Cancelled => $"{baseClasses} bg-red-100 text-red-800",
            TaskState.OnHold => $"{baseClasses} bg-gray-100 text-gray-800",
            _ => $"{baseClasses} bg-gray-100 text-gray-800"
        };
    }

    private string GetPriorityBadgeClasses(Priority priority)
    {
        var baseClasses = "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium";
        return priority switch
        {
            Priority.Critical => $"{baseClasses} bg-red-100 text-red-800",
            Priority.High => $"{baseClasses} bg-orange-100 text-orange-800",
            Priority.Medium => $"{baseClasses} bg-yellow-100 text-yellow-800",
            Priority.Low => $"{baseClasses} bg-gray-100 text-gray-800",
            _ => $"{baseClasses} bg-gray-100 text-gray-800"
        };
    }

    public class TaskFormModel
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public Priority Priority { get; set; } = Priority.Medium;
        public int? ProjectId { get; set; }
        public DateTime? DueDate { get; set; }
        public TaskState Status { get; set; } = TaskState.Pending;
    }
}
