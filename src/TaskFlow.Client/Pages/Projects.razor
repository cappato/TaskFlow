@page "/projects"
@layout ModernLayout
@using TaskFlow.Client.Components.UI
@using TaskFlow.Client.Components.Layout

<PageTitle>Proyectos - TaskFlow</PageTitle>

<!-- Header Section -->
<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8">
    <div>
        <h1 class="text-3xl font-bold text-gray-900">Proyectos</h1>
        <p class="mt-2 text-sm text-gray-700">Organiza y gestiona todos tus proyectos</p>
    </div>
    <div class="mt-4 sm:mt-0">
        <Button Variant="ButtonVariant.Primary" OnClick="ShowCreateModal">
            <Icon>
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
            </Icon>
            <ChildContent>Nuevo Proyecto</ChildContent>
        </Button>
    </div>
</div>

<!-- Projects Content -->
@if (isLoading)
{
    <div class="flex justify-center items-center py-12">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        <span class="ml-3 text-gray-600">Cargando proyectos...</span>
    </div>
}
else if (projects != null && projects.Any())
{
    <!-- Projects Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        @foreach (var project in projects)
        {
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-all duration-200 overflow-hidden">
                <!-- Project Header -->
                <div class="p-6 pb-4">
                    <div class="flex items-start justify-between mb-3">
                        <h3 class="text-lg font-semibold text-gray-900 truncate">@project.Name</h3>
                        <span class="@(project.IsActive ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800") inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium">
                            @(project.IsActive ? "Activo" : "Inactivo")
                        </span>
                    </div>

                    @if (!string.IsNullOrEmpty(project.Description))
                    {
                        <p class="text-sm text-gray-600 mb-4 line-clamp-2">@project.Description</p>
                    }

                    <!-- Progress Section -->
                    <div class="mb-4">
                        <div class="flex justify-between items-center mb-2">
                            <span class="text-sm font-medium text-gray-700">Progreso</span>
                            <span class="text-sm text-gray-500">
                                @project.CompletedTaskCount / @project.TaskCount tareas
                            </span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2">
                            <div class="bg-gradient-to-r from-blue-500 to-green-500 h-2 rounded-full transition-all duration-300"
                                 style="width: @(project.TaskCount > 0 ? (project.CompletedTaskCount * 100 / project.TaskCount) : 0)%"></div>
                        </div>
                        <div class="mt-1 text-xs text-gray-500">
                            @(project.TaskCount > 0 ? Math.Round((double)project.CompletedTaskCount / project.TaskCount * 100, 1) : 0)% completado
                        </div>
                    </div>

                    <!-- Project Dates -->
                    <div class="grid grid-cols-1 gap-3 text-xs">
                        <div class="flex items-center text-gray-500">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            <span class="font-medium">Creado:</span>
                            <span class="ml-1">@project.CreatedAt.ToString("dd/MM/yyyy")</span>
                        </div>

                        @if (project.StartDate.HasValue)
                        {
                            <div class="flex items-center text-gray-500">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                <span class="font-medium">Inicio:</span>
                                <span class="ml-1">@project.StartDate.Value.ToString("dd/MM/yyyy")</span>
                            </div>
                        }

                        @if (project.EndDate.HasValue)
                        {
                            <div class="flex items-center text-gray-500">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                <span class="font-medium">Fin:</span>
                                <span class="ml-1">@project.EndDate.Value.ToString("dd/MM/yyyy")</span>
                            </div>
                        }
                    </div>
                </div>

                <!-- Project Actions -->
                <div class="px-6 py-3 bg-gray-50 border-t border-gray-200">
                    <div class="flex space-x-2">
                        <button @onclick="() => EditProject(project)"
                                class="flex-1 inline-flex items-center justify-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                            </svg>
                            Editar
                        </button>
                        <button @onclick="() => ViewProjectTasks(project.Id)"
                                class="flex-1 inline-flex items-center justify-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                            </svg>
                            Tareas
                        </button>
                        <button @onclick="() => DeleteProject(project.Id)"
                                class="inline-flex items-center justify-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <!-- Empty State -->
    <div class="text-center py-12">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
        </svg>
        <h3 class="mt-2 text-sm font-medium text-gray-900">No hay proyectos</h3>
        <p class="mt-1 text-sm text-gray-500">Comienza creando tu primer proyecto para organizar tus tareas.</p>
        <div class="mt-6">
            <Button OnClick="ShowCreateModal">
                <Icon>
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                </Icon>
                <ChildContent>Crear Primer Proyecto</ChildContent>
            </Button>
        </div>
    </div>
}

<!-- Modern Project Modal -->
@if (showModal)
{
    <div class="fixed inset-0 z-50 overflow-y-auto">
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <!-- Background overlay -->
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" @onclick="HideModal"></div>

            <!-- Modal panel -->
            <div class="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
                <div class="sm:flex sm:items-start">
                    <div class="w-full">
                        <!-- Header -->
                        <div class="flex items-center justify-between mb-6">
                            <h3 class="text-lg font-medium text-gray-900">
                                @(editingProject != null ? "Editar Proyecto" : "Crear Nuevo Proyecto")
                            </h3>
                            <button @onclick="HideModal" class="text-gray-400 hover:text-gray-600 transition-colors">
                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                            </button>
                        </div>

                        <!-- Form -->
                        <EditForm Model="projectForm" OnValidSubmit="SaveProject">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="mb-4 p-3 bg-red-50 border border-red-200 rounded-md text-red-700 text-sm" />

                            <!-- Name -->
                            <div class="mb-4">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Nombre</label>
                                <InputText class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" @bind-Value="projectForm.Name" />
                            </div>

                            <!-- Description -->
                            <div class="mb-4">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Descripción</label>
                                <InputTextArea class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" @bind-Value="projectForm.Description" rows="3" />
                            </div>

                            <!-- Start and End Dates -->
                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Fecha de Inicio</label>
                                    <InputDate class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" @bind-Value="projectForm.StartDate" />
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Fecha de Fin</label>
                                    <InputDate class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" @bind-Value="projectForm.EndDate" />
                                </div>
                            </div>

                            <!-- Actions -->
                            <div class="flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-3 space-y-3 space-y-reverse sm:space-y-0">
                                <Button Variant="ButtonVariant.Secondary" OnClick="HideModal" Type="button">
                                    <ChildContent>Cancelar</ChildContent>
                                </Button>
                                <Button Variant="ButtonVariant.Primary" Type="submit" Loading="@isSaving">
                                    <ChildContent>@(editingProject != null ? "Actualizar" : "Crear")</ChildContent>
                                </Button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<ProjectDto>? projects;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool showModal = false;
    private ProjectDto? editingProject;
    private ProjectFormModel projectForm = new();

    [Inject] public IProjectApiService ProjectService { get; set; } = default!;
    [Inject] public NavigationManager Navigation { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            projects = await ProjectService.GetAllProjectsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading projects: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowCreateModal()
    {
        editingProject = null;
        projectForm = new ProjectFormModel();
        showModal = true;
    }

    private void EditProject(ProjectDto project)
    {
        editingProject = project;
        projectForm = new ProjectFormModel
        {
            Name = project.Name,
            Description = project.Description,
            StartDate = project.StartDate,
            EndDate = project.EndDate
        };
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
        editingProject = null;
        projectForm = new ProjectFormModel();
    }

    private async Task SaveProject()
    {
        isSaving = true;
        try
        {
            var createDto = new CreateProjectDto
            {
                Name = projectForm.Name,
                Description = projectForm.Description,
                StartDate = projectForm.StartDate,
                EndDate = projectForm.EndDate
            };

            if (editingProject != null)
            {
                await ProjectService.UpdateProjectAsync(editingProject.Id, createDto);
            }
            else
            {
                await ProjectService.CreateProjectAsync(createDto);
            }

            HideModal();
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving project: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteProject(int projectId)
    {
        if (await ProjectService.DeleteProjectAsync(projectId))
        {
            await LoadData();
        }
    }

    private void ViewProjectTasks(int projectId)
    {
        Navigation.NavigateTo($"/tasks?projectId={projectId}");
    }

    public class ProjectFormModel
    {
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
    }
}
