@page "/projects"

<PageTitle>Projects - TaskFlow</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Projects</h1>
                <button class="btn btn-primary" @onclick="ShowCreateModal">
                    <span class="oi oi-plus" aria-hidden="true"></span> New Project
                </button>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (projects != null && projects.Any())
            {
                <div class="row">
                    @foreach (var project in projects)
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <h5 class="card-title">@project.Name</h5>
                                        <span class="badge bg-@(project.IsActive ? "success" : "secondary")">
                                            @(project.IsActive ? "Active" : "Inactive")
                                        </span>
                                    </div>
                                    <p class="card-text">@project.Description</p>
                                    
                                    <div class="mb-3">
                                        <div class="d-flex justify-content-between align-items-center mb-1">
                                            <small class="text-muted">Progress</small>
                                            <small class="text-muted">
                                                @project.CompletedTaskCount / @project.TaskCount tasks
                                            </small>
                                        </div>
                                        <div class="progress" style="height: 8px;">
                                            <div class="progress-bar" role="progressbar" 
                                                 style="width: @(project.TaskCount > 0 ? (project.CompletedTaskCount * 100 / project.TaskCount) : 0)%"></div>
                                        </div>
                                    </div>

                                    <div class="row text-center mb-3">
                                        <div class="col">
                                            <small class="text-muted d-block">Created</small>
                                            <small>@project.CreatedAt.ToString("MMM dd, yyyy")</small>
                                        </div>
                                        @if (project.StartDate.HasValue)
                                        {
                                            <div class="col">
                                                <small class="text-muted d-block">Start Date</small>
                                                <small>@project.StartDate.Value.ToString("MMM dd, yyyy")</small>
                                            </div>
                                        }
                                        @if (project.EndDate.HasValue)
                                        {
                                            <div class="col">
                                                <small class="text-muted d-block">End Date</small>
                                                <small>@project.EndDate.Value.ToString("MMM dd, yyyy")</small>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="card-footer">
                                    <div class="btn-group w-100" role="group">
                                        <button class="btn btn-outline-primary" @onclick="() => EditProject(project)">
                                            <span class="oi oi-pencil" aria-hidden="true"></span> Edit
                                        </button>
                                        <button class="btn btn-outline-info" @onclick="() => ViewProjectTasks(project.Id)">
                                            <span class="oi oi-list-rich" aria-hidden="true"></span> Tasks
                                        </button>
                                        <button class="btn btn-outline-danger" @onclick="() => DeleteProject(project.Id)">
                                            <span class="oi oi-trash" aria-hidden="true"></span> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center">
                    <p class="text-muted">No projects found.</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Create/Edit Project Modal -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingProject != null ? "Edit Project" : "Create New Project")</h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="projectForm" OnValidSubmit="SaveProject">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <InputText class="form-control" @bind-Value="projectForm.Name" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea class="form-control" @bind-Value="projectForm.Description" rows="3" />
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Start Date</label>
                                    <InputDate class="form-control" @bind-Value="projectForm.StartDate" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">End Date</label>
                                    <InputDate class="form-control" @bind-Value="projectForm.EndDate" />
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">
                                @(editingProject != null ? "Update" : "Create")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<ProjectDto>? projects;
    private bool isLoading = true;
    private bool showModal = false;
    private ProjectDto? editingProject;
    private ProjectFormModel projectForm = new();

    [Inject] public IProjectApiService ProjectService { get; set; } = default!;
    [Inject] public NavigationManager Navigation { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            projects = await ProjectService.GetAllProjectsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading projects: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowCreateModal()
    {
        editingProject = null;
        projectForm = new ProjectFormModel();
        showModal = true;
    }

    private void EditProject(ProjectDto project)
    {
        editingProject = project;
        projectForm = new ProjectFormModel
        {
            Name = project.Name,
            Description = project.Description,
            StartDate = project.StartDate,
            EndDate = project.EndDate
        };
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
        editingProject = null;
        projectForm = new ProjectFormModel();
    }

    private async Task SaveProject()
    {
        try
        {
            var createDto = new CreateProjectDto
            {
                Name = projectForm.Name,
                Description = projectForm.Description,
                StartDate = projectForm.StartDate,
                EndDate = projectForm.EndDate
            };

            if (editingProject != null)
            {
                await ProjectService.UpdateProjectAsync(editingProject.Id, createDto);
            }
            else
            {
                await ProjectService.CreateProjectAsync(createDto);
            }

            HideModal();
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving project: {ex.Message}");
        }
    }

    private async Task DeleteProject(int projectId)
    {
        if (await ProjectService.DeleteProjectAsync(projectId))
        {
            await LoadData();
        }
    }

    private void ViewProjectTasks(int projectId)
    {
        Navigation.NavigateTo($"/tasks?projectId={projectId}");
    }

    public class ProjectFormModel
    {
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
    }
}
