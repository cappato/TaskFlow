@page "/attributes"
@layout ModernLayout
@using TaskFlow.Client.Components.UI
@using TaskFlow.Client.Components.Layout
@using TaskFlow.Client.Components
@using TaskFlow.Shared.Enums

<PageTitle>Atributos Personalizados - TaskFlow PIM</PageTitle>

<!-- Header Section -->
<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8">
    <div>
        <h1 class="text-3xl font-bold text-gray-900">Atributos Personalizados</h1>
        <p class="mt-2 text-sm text-gray-700">Define los campos dinámicos para tus artículos</p>
    </div>
    <div class="mt-4 sm:mt-0">
        <Button Variant="ButtonVariant.Primary" OnClick="ShowCreateModal">
            <Icon>
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
            </Icon>
            <ChildContent>Nuevo Atributo</ChildContent>
        </Button>
    </div>
</div>

@if (isLoading)
{
    <div class="flex justify-center items-center py-12">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        <span class="ml-3 text-gray-600">Cargando atributos...</span>
    </div>
}
else if (attributes != null && attributes.Any())
{
    <!-- Attributes Table -->
    <div class="bg-white shadow-sm rounded-lg overflow-hidden">
        <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tipo</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Requerido</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                @foreach (var attribute in attributes)
                {
                    <tr>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div>
                                <div class="text-sm font-medium text-gray-900">@(attribute.DisplayName)</div>
                                <div class="text-sm text-gray-500">@(attribute.Name)</div>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                @GetAttributeTypeDisplayName(attribute.Type)
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            @if (attribute.IsRequired)
                            {
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                    Requerido
                                </span>
                            }
                            else
                            {
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                    Opcional
                                </span>
                            }
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="@(attribute.IsActive ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800") inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium">
                                @(attribute.IsActive ? "Activo" : "Inactivo")
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button @onclick="() => EditAttribute(attribute)" class="text-blue-600 hover:text-blue-900 mr-3">
                                Editar
                            </button>
                            <button @onclick="() => DeleteAttribute(attribute.Id)" class="text-red-600 hover:text-red-900">
                                Eliminar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="text-center py-12">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        <h3 class="mt-2 text-sm font-medium text-gray-900">No hay atributos</h3>
        <p class="mt-1 text-sm text-gray-500">Comienza creando tu primer atributo personalizado.</p>
        <div class="mt-6">
            <button class="btn btn-primary" @onclick="ShowCreateModal">
                Crear Atributo
            </button>
        </div>
    </div>
}

<!-- Modal for Create/Edit Attribute -->
@if (showModal)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <h3 class="text-lg font-medium text-gray-900 mb-4">
                    @(editingAttribute != null ? "Editar Atributo" : "Nuevo Atributo")
                </h3>
                
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Nombre</label>
                        <input type="text" @bind="attributeForm.Name" 
                               class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Nombre para mostrar</label>
                        <input type="text" @bind="attributeForm.DisplayName" 
                               class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Tipo</label>
                        <select @bind="attributeForm.Type" 
                                class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                            @foreach (var type in Enum.GetValues<AttributeType>())
                            {
                                <option value="@type">@GetAttributeTypeDisplayName(type)</option>
                            }
                        </select>
                    </div>
                    
                    <div class="flex items-center">
                        <input type="checkbox" @bind="attributeForm.IsRequired" 
                               class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                        <label class="ml-2 block text-sm text-gray-900">Campo requerido</label>
                    </div>
                </div>
                
                <div class="flex justify-end space-x-3 mt-6">
                    <button class="btn btn-secondary" @onclick="HideModal">
                        Cancelar
                    </button>
                    <button class="btn btn-primary" @onclick="SaveAttribute" disabled="@isSaving">
                        @(editingAttribute != null ? "Actualizar" : "Crear")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<CustomAttributeDto>? attributes;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool showModal = false;
    private CustomAttributeDto? editingAttribute;
    private AttributeFormModel attributeForm = new();

    [Inject] public ICustomAttributeApiService AttributeService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            attributes = await AttributeService.GetAllAttributesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading attributes: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowCreateModal()
    {
        editingAttribute = null;
        attributeForm = new AttributeFormModel();
        showModal = true;
    }

    private void EditAttribute(CustomAttributeDto attribute)
    {
        editingAttribute = attribute;
        attributeForm = new AttributeFormModel
        {
            Name = attribute.Name,
            DisplayName = attribute.DisplayName,
            Type = attribute.Type,
            IsRequired = attribute.IsRequired
        };
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
        editingAttribute = null;
        attributeForm = new AttributeFormModel();
    }

    private async Task SaveAttribute()
    {
        isSaving = true;
        try
        {
            if (editingAttribute != null)
            {
                var updateDto = new UpdateCustomAttributeDto
                {
                    Name = attributeForm.Name,
                    DisplayName = attributeForm.DisplayName,
                    Type = attributeForm.Type,
                    IsRequired = attributeForm.IsRequired
                };
                await AttributeService.UpdateAttributeAsync(editingAttribute.Id, updateDto);
            }
            else
            {
                var createDto = new CreateCustomAttributeDto
                {
                    Name = attributeForm.Name,
                    DisplayName = attributeForm.DisplayName,
                    Type = attributeForm.Type,
                    IsRequired = attributeForm.IsRequired
                };
                await AttributeService.CreateAttributeAsync(createDto);
            }

            HideModal();
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving attribute: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteAttribute(int id)
    {
        if (await AttributeService.DeleteAttributeAsync(id))
        {
            await LoadData();
        }
    }

    private string GetAttributeTypeDisplayName(AttributeType type)
    {
        return type switch
        {
            AttributeType.Text => "Texto",
            AttributeType.Number => "Número",
            AttributeType.Integer => "Entero",
            AttributeType.Boolean => "Verdadero/Falso",
            AttributeType.Date => "Fecha",
            AttributeType.DateTime => "Fecha y Hora",
            AttributeType.Color => "Color",
            AttributeType.Email => "Email",
            AttributeType.Url => "URL",
            _ => type.ToString()
        };
    }

    public class AttributeFormModel
    {
        public string Name { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
        public AttributeType Type { get; set; } = AttributeType.Text;
        public bool IsRequired { get; set; } = false;
    }
}
