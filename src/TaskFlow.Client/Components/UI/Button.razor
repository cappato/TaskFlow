@using TaskFlow.Client.Components.UI

<button type="@Type"
        class="@GetButtonClasses()"
        disabled="@Disabled"
        @onclick="OnClick">
    @if (Loading)
    {
        <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-current" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
    }
    
    @if (Icon != null && !Loading)
    {
        @Icon
    }
    
    @ChildContent
</button>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? Icon { get; set; }
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public string Type { get; set; } = "button";
    [Parameter] public ButtonVariant Variant { get; set; } = ButtonVariant.Primary;
    [Parameter] public ButtonSize Size { get; set; } = ButtonSize.Medium;
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public bool Loading { get; set; } = false;
    [Parameter] public string AdditionalClasses { get; set; } = "";

    private string GetButtonClasses()
    {
        var classes = new List<string>
        {
            "inline-flex",
            "items-center",
            "justify-center",
            "font-medium",
            "rounded-md",
            "transition-colors",
            "duration-200",
            "focus:outline-none",
            "focus:ring-2",
            "focus:ring-offset-2"
        };

        // Size classes
        classes.AddRange(Size switch
        {
            ButtonSize.Small => new[] { "px-3", "py-1.5", "text-sm" },
            ButtonSize.Medium => new[] { "px-4", "py-2", "text-sm" },
            ButtonSize.Large => new[] { "px-6", "py-3", "text-base" },
            _ => new[] { "px-4", "py-2", "text-sm" }
        });

        // Variant classes
        if (Disabled || Loading)
        {
            classes.AddRange(new[] { "opacity-50", "cursor-not-allowed" });
        }
        else
        {
            classes.AddRange(Variant switch
            {
                ButtonVariant.Primary => new[] { "bg-blue-600", "text-white", "hover:bg-blue-700", "focus:ring-blue-500" },
                ButtonVariant.Secondary => new[] { "bg-gray-200", "text-gray-900", "hover:bg-gray-300", "focus:ring-gray-500" },
                ButtonVariant.Success => new[] { "bg-green-600", "text-white", "hover:bg-green-700", "focus:ring-green-500" },
                ButtonVariant.Danger => new[] { "bg-red-600", "text-white", "hover:bg-red-700", "focus:ring-red-500" },
                ButtonVariant.Warning => new[] { "bg-yellow-600", "text-white", "hover:bg-yellow-700", "focus:ring-yellow-500" },
                ButtonVariant.Ghost => new[] { "text-gray-700", "hover:bg-gray-50", "focus:ring-gray-500" },
                _ => new[] { "bg-blue-600", "text-white", "hover:bg-blue-700", "focus:ring-blue-500" }
            });
        }

        if (!string.IsNullOrEmpty(AdditionalClasses))
            classes.Add(AdditionalClasses);

        return string.Join(" ", classes);
    }
}
