@using TaskFlow.Shared.DTOs
@using TaskFlow.Shared.Enums

<div class="row mb-4">
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <h2 class="text-primary">@TotalTasks</h2>
                <p class="card-text">Total Tareas</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <h2 class="text-warning">@PendingTasks</h2>
                <p class="card-text">Pendientes</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <h2 class="text-info">@InProgressTasks</h2>
                <p class="card-text">En Progreso</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <h2 class="text-success">@CompletedTasks</h2>
                <p class="card-text">Completadas</p>
            </div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Tasa de Finalización</h5>
                <div class="progress mb-2" style="height: 20px;">
                    <div class="progress-bar bg-success" role="progressbar"
                         style="width: @CompletionPercentage%"
                         aria-valuenow="@CompletionPercentage" aria-valuemin="0" aria-valuemax="100">
                        @CompletionPercentage.ToString("F1")%
                    </div>
                </div>
                <small class="text-muted">@CompletedTasks de @TotalTasks tareas completadas</small>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Distribución por Prioridad</h5>
                <div class="mb-2">
                    <div class="d-flex justify-content-between">
                        <span>Crítica</span>
                        <span class="badge bg-dark">@CriticalTasks</span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>Alta</span>
                        <span class="badge bg-danger">@HighTasks</span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>Media</span>
                        <span class="badge bg-warning">@MediumTasks</span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>Baja</span>
                        <span class="badge bg-secondary">@LowTasks</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (OverdueTasks > 0)
{
    <div class="row mb-4">
        <div class="col-12">
            <div class="alert alert-warning">
                <h6 class="alert-heading">⚠️ Atención Requerida</h6>
                Tienes <strong>@OverdueTasks</strong> tarea@(OverdueTasks > 1 ? "s" : "") vencida@(OverdueTasks > 1 ? "s" : "").
                <a href="/tasks" class="alert-link">Revísalas ahora</a>.
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public IEnumerable<TaskDto>? Tasks { get; set; }

    private int TotalTasks => Tasks?.Count() ?? 0;
    private int PendingTasks => Tasks?.Count(t => t.Status == TaskState.Pending) ?? 0;
    private int InProgressTasks => Tasks?.Count(t => t.Status == TaskState.InProgress) ?? 0;
    private int CompletedTasks => Tasks?.Count(t => t.Status == TaskState.Completed) ?? 0;
    private int CriticalTasks => Tasks?.Count(t => t.Priority == Priority.Critical) ?? 0;
    private int HighTasks => Tasks?.Count(t => t.Priority == Priority.High) ?? 0;
    private int MediumTasks => Tasks?.Count(t => t.Priority == Priority.Medium) ?? 0;
    private int LowTasks => Tasks?.Count(t => t.Priority == Priority.Low) ?? 0;
    
    private double CompletionPercentage => TotalTasks > 0 ? (double)CompletedTasks / TotalTasks * 100 : 0;
    
    private int OverdueTasks => Tasks?.Count(t => 
        t.DueDate.HasValue && 
        t.DueDate.Value < DateTime.Now && 
        t.Status != TaskState.Completed) ?? 0;
}
