// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskFlow.Server.Data;

#nullable disable

namespace TaskFlow.Server.Migrations
{
    [DbContext(typeof(TaskFlowDbContext))]
    partial class TaskFlowDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("TaskFlow.Domain.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SKU")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("TaskFlow.Domain.Entities.ArticleAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArticleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomAttributeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId", "CustomAttributeId")
                        .IsUnique();

                    b.HasIndex("CustomAttributeId", "Value");

                    b.ToTable("ArticleAttributeValues");
                });

            modelBuilder.Entity("TaskFlow.Domain.Entities.ArticleVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArticleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("RetailPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Size")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Stock")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("WholesalePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("SKU")
                        .IsUnique();

                    b.ToTable("ArticleVariants");
                });

            modelBuilder.Entity("TaskFlow.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 8, 23, 36, 54, 621, DateTimeKind.Utc).AddTicks(8633),
                            Description = "Calzado deportivo",
                            IsActive = true,
                            Name = "Calzado"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 8, 23, 36, 54, 621, DateTimeKind.Utc).AddTicks(8633),
                            Description = "Ropa deportiva",
                            IsActive = true,
                            Name = "Ropa"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 8, 23, 36, 54, 621, DateTimeKind.Utc).AddTicks(8633),
                            Description = "Zapatillas para correr",
                            IsActive = true,
                            Name = "Zapatillas Running",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 8, 23, 36, 54, 621, DateTimeKind.Utc).AddTicks(8633),
                            Description = "Zapatillas de fútbol",
                            IsActive = true,
                            Name = "Zapatillas Fútbol",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 8, 23, 36, 54, 621, DateTimeKind.Utc).AddTicks(8633),
                            Description = "Remeras deportivas",
                            IsActive = true,
                            Name = "Remeras",
                            ParentCategoryId = 2
                        });
                });

            modelBuilder.Entity("TaskFlow.Domain.Entities.CustomAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidationRules")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CustomAttributes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 8, 23, 36, 54, 621, DateTimeKind.Utc).AddTicks(8633),
                            DisplayName = "Talle",
                            IsActive = true,
                            IsRequired = true,
                            Name = "talle",
                            SortOrder = 1,
                            Type = "Select"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 8, 23, 36, 54, 621, DateTimeKind.Utc).AddTicks(8633),
                            DisplayName = "Color",
                            IsActive = true,
                            IsRequired = true,
                            Name = "color",
                            SortOrder = 2,
                            Type = "Color"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 8, 23, 36, 54, 621, DateTimeKind.Utc).AddTicks(8633),
                            DisplayName = "Material",
                            IsActive = true,
                            IsRequired = false,
                            Name = "material",
                            SortOrder = 3,
                            Type = "Text"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 8, 23, 36, 54, 621, DateTimeKind.Utc).AddTicks(8633),
                            DisplayName = "Temporada",
                            IsActive = true,
                            IsRequired = false,
                            Name = "temporada",
                            SortOrder = 4,
                            Type = "Select"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 8, 23, 36, 54, 621, DateTimeKind.Utc).AddTicks(8633),
                            DisplayName = "Género",
                            IsActive = true,
                            IsRequired = true,
                            Name = "genero",
                            SortOrder = 5,
                            Type = "Select"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 6, 8, 23, 36, 54, 621, DateTimeKind.Utc).AddTicks(8633),
                            DisplayName = "Resistente al Agua",
                            IsActive = true,
                            IsRequired = false,
                            Name = "resistencia_agua",
                            SortOrder = 6,
                            Type = "Boolean"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 6, 8, 23, 36, 54, 621, DateTimeKind.Utc).AddTicks(8633),
                            DisplayName = "Tipo de Suela",
                            IsActive = true,
                            IsRequired = false,
                            Name = "tipo_suela",
                            SortOrder = 7,
                            Type = "Text"
                        });
                });

            modelBuilder.Entity("TaskFlow.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 8, 23, 36, 54, 621, DateTimeKind.Utc).AddTicks(8633),
                            Email = "admin@cruzado.com",
                            IsActive = true,
                            Name = "Admin Cruzado"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 8, 23, 36, 54, 621, DateTimeKind.Utc).AddTicks(8633),
                            Email = "supplier@nike.com",
                            IsActive = true,
                            Name = "Nike Supplier"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 8, 23, 36, 54, 621, DateTimeKind.Utc).AddTicks(8633),
                            Email = "supplier@adidas.com",
                            IsActive = true,
                            Name = "Adidas Supplier"
                        });
                });

            modelBuilder.Entity("TaskFlow.Domain.Entities.Article", b =>
                {
                    b.HasOne("TaskFlow.Domain.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TaskFlow.Domain.Entities.User", "Supplier")
                        .WithMany("SuppliedArticles")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("TaskFlow.Domain.Entities.ArticleAttributeValue", b =>
                {
                    b.HasOne("TaskFlow.Domain.Entities.Article", "Article")
                        .WithMany("AttributeValues")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskFlow.Domain.Entities.CustomAttribute", "CustomAttribute")
                        .WithMany("AttributeValues")
                        .HasForeignKey("CustomAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("CustomAttribute");
                });

            modelBuilder.Entity("TaskFlow.Domain.Entities.ArticleVariant", b =>
                {
                    b.HasOne("TaskFlow.Domain.Entities.Article", "Article")
                        .WithMany("Variants")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("TaskFlow.Domain.Entities.Category", b =>
                {
                    b.HasOne("TaskFlow.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("TaskFlow.Domain.Entities.Article", b =>
                {
                    b.Navigation("AttributeValues");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("TaskFlow.Domain.Entities.Category", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("TaskFlow.Domain.Entities.CustomAttribute", b =>
                {
                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("TaskFlow.Domain.Entities.User", b =>
                {
                    b.Navigation("SuppliedArticles");
                });
#pragma warning restore 612, 618
        }
    }
}
