@using PimFlow.Shared.DTOs
@using PimFlow.Shared.Enums

<div class="card h-100">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-start mb-2">
            <h6 class="card-title mb-0">@Task.Title</h6>
            <span class="badge bg-@GetPriorityColor(Task.Priority)">@Task.Priority</span>
        </div>
        
        @if (!string.IsNullOrEmpty(Task.Description))
        {
            <p class="card-text text-muted small">@Task.Description</p>
        }
        
        <div class="mb-2">
            <span class="badge bg-@GetStatusColor(Task.Status)">@Task.Status</span>
            @if (!string.IsNullOrEmpty(Task.ProjectName))
            {
                <span class="badge bg-secondary ms-1">@Task.ProjectName</span>
            }
        </div>
        
        @if (Task.DueDate.HasValue)
        {
            <div class="mb-2">
                <small class="text-muted">
                    <i class="oi oi-calendar"></i> Due: @Task.DueDate.Value.ToString("MMM dd, yyyy")
                    @if (Task.DueDate.Value < DateTime.Now && Task.Status != TaskState.Completed)
                    {
                        <span class="text-danger">(Overdue)</span>
                    }
                </small>
            </div>
        }
        
        @if (!string.IsNullOrEmpty(Task.AssignedToUserName))
        {
            <div class="mb-2">
                <small class="text-muted">
                    <i class="oi oi-person"></i> @Task.AssignedToUserName
                </small>
            </div>
        }
        
        <div class="text-muted small">
            Created: @Task.CreatedAt.ToString("MMM dd, yyyy")
            @if (Task.CompletedAt.HasValue)
            {
                <br />
                <text>Completed: @Task.CompletedAt.Value.ToString("MMM dd, yyyy")</text>
            }
        </div>
    </div>
    
    @if (ShowActions)
    {
        <div class="card-footer">
            <div class="btn-group w-100" role="group">
                <button class="btn btn-outline-primary btn-sm" @onclick="() => OnEdit.InvokeAsync(Task)">
                    <i class="oi oi-pencil"></i> Edit
                </button>
                @if (Task.Status != TaskState.Completed)
                {
                    <button class="btn btn-outline-success btn-sm" @onclick="() => OnMarkComplete.InvokeAsync(Task)">
                        <i class="oi oi-check"></i> Complete
                    </button>
                }
                <button class="btn btn-outline-danger btn-sm" @onclick="() => OnDelete.InvokeAsync(Task)">
                    <i class="oi oi-trash"></i> Delete
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public TaskDto Task { get; set; } = default!;
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public EventCallback<TaskDto> OnEdit { get; set; }
    [Parameter] public EventCallback<TaskDto> OnDelete { get; set; }
    [Parameter] public EventCallback<TaskDto> OnMarkComplete { get; set; }

    private string GetStatusColor(TaskState status)
    {
        return status switch
        {
            TaskState.Pending => "secondary",
            TaskState.InProgress => "primary",
            TaskState.Completed => "success",
            TaskState.Cancelled => "danger",
            TaskState.OnHold => "warning",
            _ => "secondary"
        };
    }

    private string GetPriorityColor(Priority priority)
    {
        return priority switch
        {
            Priority.Low => "secondary",
            Priority.Medium => "warning",
            Priority.High => "danger",
            Priority.Critical => "dark",
            _ => "secondary"
        };
    }
}
