@using PimFlow.Shared.DTOs
@using PimFlow.Shared.Enums

<div class="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-all duration-200">
    <!-- Header -->
    <div class="flex items-start justify-between mb-3">
        <div class="flex-1 min-w-0">
            <h4 class="text-sm font-medium text-gray-900 truncate">@Task.Title</h4>
            @if (!string.IsNullOrEmpty(Task.Description))
            {
                <p class="text-sm text-gray-500 mt-1">@Task.Description</p>
            }
        </div>
    </div>

    <!-- Status and Priority -->
    <div class="flex items-center justify-between mb-3">
        <div class="flex items-center space-x-2">
            <!-- Status Badge -->
            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                @GetStatusDisplayName()
            </span>

            <!-- Priority Badge -->
            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                @GetPriorityDisplayName()
            </span>
        </div>

        @if (Task.DueDate.HasValue)
        {
            <div class="flex items-center text-xs text-gray-500">
                <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                @Task.DueDate.Value.ToString("dd/MM/yyyy")
            </div>
        }
    </div>

    <!-- Project Info -->
    @if (!string.IsNullOrEmpty(Task.ProjectName))
    {
        <div class="flex items-center text-xs text-gray-500">
            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
            </svg>
            @Task.ProjectName
        </div>
    }
</div>

@code {
    [Parameter] public TaskDto Task { get; set; } = default!;
    [Parameter] public bool ShowActions { get; set; } = true;



    private string GetStatusDisplayName()
    {
        return Task.Status switch
        {
            TaskState.Pending => "Pendiente",
            TaskState.InProgress => "En Progreso",
            TaskState.Completed => "Completada",
            TaskState.Cancelled => "Cancelada",
            TaskState.OnHold => "En Espera",
            _ => Task.Status.ToString()
        };
    }

    private string GetPriorityDisplayName()
    {
        return Task.Priority switch
        {
            Priority.Low => "Baja",
            Priority.Medium => "Media",
            Priority.High => "Alta",
            Priority.Critical => "CrÃ­tica",
            _ => Task.Priority.ToString()
        };
    }
}
